#RequireContext CSmMapType

#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor

#Const		Version		"2013-06-28"

// Rules texts
#Const SpawnRules		"""- You must place $<$f00exactly Four Spawn$> 
$>
 - You can place $<$00fas much Re-Spawns as you want
$>
$000 - Re-Spawns should be placed close to their checkpoints."""

#Const CPRules			"""You have to place $<$f00at least one Goal$> and $<$00fas much Checkpoints as you want$>.

You are able to assign a checkpoint order forcing the players to reach the CPs in this order."""

/* -------------------------------------- */
// Variables
/* -------------------------------------- */
declare Ident G_StartSpawnTank;
declare Ident G_StartSpawnSniper;
declare Ident G_StartSpawnAssault;
declare Ident G_StartSpawnSpeed;
declare Ident[] G_KnownIds;

/* -------------------------------------- */
// Functions
/* -------------------------------------- */

/* -------------------------------------- */
// Initialize the anchors
Void InitAnchors() {
	G_StartSpawnTank = NullId;
	G_StartSpawnSniper = NullId;
	G_StartSpawnAssault = NullId;
	G_StartSpawnSpeed = NullId;
	
	G_KnownIds.clear();
	foreach (Data in AnchorData) {
		switch (Data.DefaultTag) {
			case "SpawnTank": {
				if (G_StartSpawnTank == NullId && TextLib::SubString(Data.Tag, 0, 5) == "SpawnTank") {
					G_StartSpawnTank = Data.Id;
				}
			}
			case "SpawnSniper": {
				if (G_StartSpawnSniper == NullId && TextLib::SubString(Data.Tag, 0, 5) == "SpawnSniper") {
					G_StartSpawnSniper = Data.Id;
				}
			}
			case "SpawnAssault": {
				if (G_StartSpawnAssault == NullId && TextLib::SubString(Data.Tag, 0, 5) == "SpawnAssault") {
					G_StartSpawnAssault = Data.Id;
				}
			}
			case "SpawnSpeed": {
				if (G_StartSpawnSpeed == NullId && TextLib::SubString(Data.Tag, 0, 5) == "SpawnSpeed") {
					G_StartSpawnSpeed = Data.Id;
				}
			}
		}
		G_KnownIds.add(Data.Id);
	}
}

/* -------------------------------------- */
// Check if the map is valid
Void UpdateValidability() {	 
	Anchor::UpdateAnchorCounts();
	
	// Local anchors
	declare AnchorDataTags = Text[];
	foreach (Data in AnchorData) {
		AnchorDataTags.add(Data.Tag);
	}
	
	// Exactly four spawn
	declare SpawnTags = ["ReSpawn", "SpawnTank", "SpawnSniper", "SpawnAssault", "SpawnSpeed"];
	declare SpawnExists = 0;
	declare SpawnTank = 0;
	declare SpawnSniper = 0;
	declare SpawnAssault = 0;
	declare SpawnSpeed = 0;
	
	foreach (Tag in AnchorDataTags) {
		if (SpawnTags.exists(Tag)) {
			SpawnExists += 1;
		}
	}
	
	foreach(Data in AnchorData){
		if(Data.Tag == "SpawnTank"){
			SpawnTank += 1;
		}
		if(Data.Tag == "SpawnSniper"){
			SpawnSniper += 1;
		}
		if(Data.Tag == "SpawnAssault"){
			SpawnAssault += 1;
		}
		if(Data.Tag == "SpawnSpeed"){
			SpawnSpeed += 1;
		}
	}
	
	//Test Spawn Player
	if(SpawnTank == 0 || SpawnSniper == 0 || SpawnAssault == 0 || SpawnAssault == 0){
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place exactly 4 Spawn : 1 SpawnTank, 1 SpawnSniper, 1 SpawnAssault, 1 SpawnSpeed.");
		return;
	}
	if (SpawnTank > 1) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place exactly 1 SpawnTank.");
		return;
	}
	if (SpawnSniper > 1) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place exactly 1 SpawnSniper.");
		return;
	}
	if (SpawnAssault > 1) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place exactly 1 SpawnAssault.");
		return;
	}
	if (SpawnSpeed > 1) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place exactly 1 SpawnSpeed.");
		return;
	}
	if (SpawnExists != 4) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place exactly 4 spawn.");
		return;
	}
	//Fin test Spawn
	
	// Un seul Goal
	if (!Anchor::HasAtLeastOneAnchor("Goal", 0, _("You must place at least one Goal."))) {
		return;
	}
	
	// Update validation status
	ValidationStatus = CSmMapType::ValidationStatus::Validated;
}

/* -------------------------------------- */
// Checks for new anchors and sets initial tags
Void UpdateAnchors() {
	// Check if known anchors has been deleted
	declare Ident[] DeletedIds;
	foreach (Id in G_KnownIds) {
		if (!AnchorData.existskey(Id)) {
			DeletedIds.add(Id);
		}
	}
	declare Boolean Removed;
	foreach (Id in DeletedIds) {
		Removed = G_KnownIds.remove(Id);
	}
	
	// Check if former start spawn has been deleted or modified
	if (G_StartSpawnTank != NullId) {
		declare StartSpawnSet = False;
		foreach (Data in AnchorData) {
			if (Data.Id == G_StartSpawnTank) {
				if (Data.Tag == "Spawn") {
					StartSpawnSet = True;
				}
				break;
			}
		}
		if (!StartSpawnSet) {
			G_StartSpawnTank = NullId;
		}
	}
	
	// Assign new initial tag if necessary
	foreach (Data in AnchorData) {
		// Only touch new anchors
		if (!G_KnownIds.exists(Data.Id)) {
			switch (Data.DefaultTag) {
				case "SpawnTank": {
					if (G_StartSpawnTank == NullId) {
						G_StartSpawnTank = Data.Id;
					}
				}
				case "SpawnSniper": {
					if (G_StartSpawnSniper == NullId) {
						G_StartSpawnSniper = Data.Id;
					}
				}
				case "SpawnAssault": {
					if (G_StartSpawnAssault == NullId) {
						G_StartSpawnAssault = Data.Id;
					}
				}
				case "SpawnSpeed": {
					if (G_StartSpawnSpeed == NullId) {
						G_StartSpawnSpeed = Data.Id;
					}
				}
				case "Goal": {
					Data.Tag = "Checkpoint";
				}
			}
			G_KnownIds.add(Data.Id);
		}
	}
}

/* -------------------------------------- */
// Manialink for goals
Text EditGoalsManialink() {
	return """<script><!--
		main() {
			declare Buttons = [
			(Page.GetFirstChild("No-Function") as CMlLabel),
			(Page.GetFirstChild("Goal") as CMlLabel),
			(Page.GetFirstChild("Checkpoint") as CMlLabel),
			(Page.GetFirstChild("CheckpointType1") as CMlLabel),
			(Page.GetFirstChild("CheckpointType2") as CMlLabel),
			(Page.GetFirstChild("CheckpointType3") as CMlLabel)];
			
			declare OrderEntry <=> (Page.GetFirstChild("OrderEntry") as CMlEntry);
			
			declare Boolean Finish for Page;
			declare Text AnchorTag for Page;
			declare Text AnchorOrder for Page;
			
			OrderEntry.Value = AnchorOrder;
			
			Finish = False;	
			while (!Finish) {
				yield;
				foreach(Button in Buttons) {
					if (AnchorTag == Button.ControlId) {
						Button.Value = "$090"^Button.ControlId;
					} else {
						Button.Value = "$fff"^Button.ControlId;
					}
				}
				
				foreach (Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId != "Cancel") {
								AnchorTag = Event.ControlId;
								AnchorOrder = OrderEntry.Value;
							}
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 45">
		<quad posn="0 8 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 13 3" sizen="70 15" halign="center" valign="bottom" style="TextTitle3" text="$fffEdit Goals and Checkpoints" />
		<quad posn="0 8 -1" sizen="70 54" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="0 -4">
			<label id="No-Function" posn="0 8" scale="1.4" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="Goal" posn="0 1" scale="1.4" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="Checkpoint" posn="0 -6" scale="1.4" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="CheckpointType1" posn="-31 -14" scale="0.8" halign="left" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="CheckpointType2" posn="33 -14" scale="0.8" halign="right" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="CheckpointType3" posn="0 -18" scale="0.8" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
			<format textcolor="00fc"/>
			<label posn="-11 -27" text="Order:" valign="center" />
			<entry id="OrderEntry" posn="15 -27.5" sizen="10 4.7" halign="right" valign="center" default="0" ScriptEvents="true"/>
		</frame>
		<label id="Cancel" text="Cancel" posn="0 -37" halign="center" style="CardButtonSmall" ScriptEvents="true"/>
    </frame>
	<frame posn="120 -17">
		<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fffRules" />
		<quad posn="0 0 -1" sizen="70 54" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="-32 -3">
			<label posn="0 0" sizen="64 7" autonewline="1" style="TextCardSmallScores2" text="$111{{{CPRules}}}" />
		</frame>
	</frame>
	""";
}

/* -------------------------------------- */
// Manialink for spawns
Text EditSpawnsManialink() {
	return """<script><!--
		main() {
			declare Buttons = [
			(Page.GetFirstChild("No-Func") as CMlLabel),
			(Page.GetFirstChild("ReSpawn") as CMlLabel),
			(Page.GetFirstChild("SpawnTank") as CMlLabel),
			(Page.GetFirstChild("SpawnSniper") as CMlLabel),
			(Page.GetFirstChild("SpawnAssault") as CMlLabel),
			(Page.GetFirstChild("SpawnSpeed") as CMlLabel)];
			
			declare Text AnchorTag for Page;
			declare Boolean Finish for Page;
			Finish = False;	
			while (!Finish) {
				yield;
				foreach (Button in Buttons) {
					if (AnchorTag == Button.ControlId) {
						Button.Value = "$090"^Button.ControlId;
					} else {
						Button.Value = "$fff"^Button.ControlId;
					}
				}
				
				foreach (Event in PendingEvents) {
					switch (Event.Type){
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId != "Cancel") {
								AnchorTag = Event.ControlId;
							}
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 35">
		<quad posn="0 8 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 13 3" sizen="70 15" halign="center" valign="bottom" style="TextTitle3" text="$fffEdit Spawns" />
		<quad posn="0 8 -1" sizen="70 41" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="0 -4">
			<label id="No-Func" posn="-2 5" scale="1" halign="right" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="ReSpawn" posn="2 5" scale="1" halign="left" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="SpawnTank" posn="-2 -3" scale="1" halign="right" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="SpawnSniper" posn="2 -3" scale="1" halign="left" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="SpawnAssault" posn="-2 -12" scale="1" halign="right" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="SpawnSpeed" posn="2 -12" scale="1" halign="left" style="TextButtonMedium" ScriptEvents="true"/>
		</frame>
		<label id="Cancel" text="Cancel" posn="0 -24" halign="center" style="CardButtonSmall" ScriptEvents="true"/>
    </frame>
	<frame posn="120 -14">
		<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fffRules" />
		<quad posn="0 0 -1" sizen="70 39" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="-32 -3">
			<label posn="0 0" sizen="64 7" autonewline="1" style="TextCardSmallScores2" text="$111{{{SpawnRules}}}" />
		</frame>
	</frame>
	""";
}

/* -------------------------------------- */
// Manialink for non editable anchor
Text NoEditManialink() {
	return """<script><!--			
			main() {
				declare Boolean Finish for Page;
				Finish = False;	
				while (!Finish) {
					yield;
					
					foreach (Event in PendingEvents) {
						switch (Event.Type){
							case CMlEvent::Type::MouseClick: {
								Finish = True;
							}	
						}
					}
				}
			}			
		--></script>
		<frame posn="120 35">
			<quad posn="0 0 -1" sizen="70 15" halign="center" style="Bgs1" substyle="BgWindow2"/>
			<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
			<label posn="0 5.5 3" scale="0.9" halign="center" valign="bottom" style="TextTitle3" text="$fffThis anchor is not editable" />
			<label text="OK" posn="0 -3.5 3" halign="center" style="CardButtonMedium" ScriptEvents="true"/>
	    </frame>
	""";
}

/* -------------------------------------- */
// Show the anchor editing manialink
Void EditAnchorData(Ident _EditedAnchorDataId) {
	declare Boolean Finish for ManialinkPage;
	declare Text AnchorTag for ManialinkPage;
	declare Text AnchorOrder for ManialinkPage;
	
	switch (AnchorData[_EditedAnchorDataId].DefaultTag) {
		case "Goal": {
			ManialinkText = EditGoalsManialink();
		}
		case "Checkpoint": {
			ManialinkText = EditGoalsManialink();
		}
		case "Spawn": {
			ManialinkText = EditSpawnsManialink();
		}
		default: {
			ManialinkText = NoEditManialink();
		}
	}
	
	AnchorTag = AnchorData[_EditedAnchorDataId].Tag;
	AnchorOrder = TextLib::ToText(AnchorData[_EditedAnchorDataId].Order);
	
	Finish = False;
	while (!Finish) {
		yield;
	}
	AnchorData[_EditedAnchorDataId].Tag = AnchorTag;
	AnchorData[_EditedAnchorDataId].Order = TextLib::ToInteger(AnchorOrder);
	
	UpdateValidability();
}


/* -------------------------------------- */
// Universe choice
Void EditUniverse() 
{  	
	while(True) 
	{			
		ManialinkText = 
		"""
		<frame posn="30 30 51" id="MedievalSpec" hidden="1">
			<label text="$f51$oMedieval Specifications" />
			<label posn="0 -8" text="Character 1 : blabla" />
			<label posn="0 -16" text="Character 2 : blabla" />
			<label posn="0 -24" text="Character 3 : blabla" />
			<label posn="0 -32" text="Character 4 : blabla" />
		</frame>
		
		<frame posn="30 30 51" id="SciFiSpec" hidden="1">
			<label text="$00c$oSci-Fi Specifications" />
			<label posn="0 -8" text="Character 1 : blabla" />
			<label posn="0 -16" text="Character 2 : blabla" />
			<label posn="0 -24" text="Character 3 : blabla" />
			<label posn="0 -32" text="Character 4 : blabla" />
		</frame>
		
		<frame posn="0 0 50">
			<quad id="BackgroundQuad" posn="-160 90 0" sizen="320 180" bgcolor="111" scriptevents="1"/>			
			
			<label text="Select your universe" posn="0 30" style="TextTitle3" halign="center"/>				
				
			<quad id="Medieval" posn="0 20 1" sizen="30 6" halign="center" valign="center" style="Bgs1InRace" substyle="BgCard" ScriptEvents="1"/>
			<label text="$000Medieval" posn="0 20 2" halign="center" valign="center" style="TextButtonSmall" textsize="2"/>
			
			<quad id="SciFi" posn="0 12 1" sizen="30 6" halign="center" valign="center" style="Bgs1InRace" substyle="BgCard" ScriptEvents="1"/>
			<label text="$000Sci-Fi" posn="0 12 2" halign="center" valign="center" style="TextButtonSmall" textsize="2"/>
		</frame>
		
		<script><!--
			main ()
			{
				declare ButtonClicked for Page = "";
				while(True)
				{
					yield;
					foreach(Event in PendingEvents)
					{
						if (Event.ControlId == "Medieval" || Event.ControlId == "SciFi")
						{
							if(Event.Type == CMlEvent::Type::MouseClick)
							{	
								if (ButtonClicked == "") ButtonClicked = Event.ControlId;
							}							
							else if(Event.Type == CMlEvent::Type::MouseOver)
							{
								Page.GetFirstChild(Event.ControlId ^ "Spec").Show();
							}
							else if(Event.Type == CMlEvent::Type::MouseOut)
							{
								Page.GetFirstChild(Event.ControlId ^ "Spec").Hide();
							}
						}

					}
				}
			}
		--></script>
		""";

		declare ButtonClicked for ManialinkPage = "" ;
		ButtonClicked = "";
		wait(ButtonClicked != "");		

		if (ButtonClicked != "BackgroundQuad")
		{
			declare Page <=> ManialinkPage;
			declare metadata Text Universe for Map;			
			Universe = ButtonClicked;			
			break;
		}
	}

	ManialinkText = "";
}

/* -------------------------------------- */
// Main
/* -------------------------------------- */

main() {
	log("Adventure.Script.txt loaded!");
	log("Version: "^Version);

	CustomEditAnchorData = True;
	
	declare metadata Text Universe for Map;
	if (Universe == "")	EditUniverse();	
	
	declare metadata Text ScriptVersion for Map;
	ScriptVersion = Version;

	InitAnchors();	
	UpdateValidability();
	
	while (True) {
		yield;
		
		ManialinkText = "";
			
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CPluginEvent::Type::MapModified: {
					UpdateAnchors();
					UpdateValidability();
				}
				case CPluginEvent::Type::EditAnchor: {
					EditAnchorData(Event.EditedAnchorDataId);
				}
				case CPluginEvent::Type::StartValidation: {
					StartTestMapWithMode("Adventure.Script.txt");
				}
			}
		}		
	}	
}